{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "properties": {
    "inspectVersion": {
      "description": "If set, Fork-Version will print the current version and exit.",
      "type": "boolean"
    },
    "files": {
      "description": "List of the files to be updated.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "glob": {
      "description": "Glob pattern to match files to be updated.",
      "type": "string"
    },
    "path": {
      "description": "The path Fork-Version will run from. Defaults to \"process.cwd()\".",
      "type": "string"
    },
    "changelog": {
      "description": "Name of the changelog file. Defaults to \"CHANGELOG.md\".",
      "type": "string"
    },
    "header": {
      "description": "The header text for the changelog.",
      "type": "string"
    },
    "tagPrefix": {
      "description": "Specify a prefix for the created tag. Defaults to \"v\".",
      "type": "string"
    },
    "preRelease": {
      "description": "Make a pre-release with optional label if given value is a string.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "currentVersion": {
      "description": "If set, Fork-Version will use this version instead of trying to determine one.",
      "type": "string"
    },
    "nextVersion": {
      "description": "If set, Fork-Version will attempt to update to this version, instead of incrementing using \"conventional-commit\".",
      "type": "string"
    },
    "releaseAs": {
      "description": "Release as increments the version by the specified level. Overrides the default behaviour of \"conventional-commit\".",
      "anyOf": [
        {
          "type": "string",
          "const": "major"
        },
        {
          "type": "string",
          "const": "minor"
        },
        {
          "type": "string",
          "const": "patch"
        }
      ]
    },
    "allowMultipleVersions": {
      "description": "Don't throw an error if multiple versions are found in the given files.",
      "type": "boolean"
    },
    "commitAll": {
      "description": "Commit all changes, not just files updated by Fork-Version.",
      "type": "boolean"
    },
    "changelogAll": {
      "description": "If this flag is set, all default commit types will be added to the changelog, not just `feat` and `fix`.",
      "type": "boolean"
    },
    "debug": {
      "description": "Output debug information.",
      "type": "boolean"
    },
    "dryRun": {
      "description": "No output will be written to disk or committed.",
      "type": "boolean"
    },
    "silent": {
      "description": "Run without logging to the terminal.",
      "type": "boolean"
    },
    "gitTagFallback": {
      "description": "If unable to find a version in the given files, fallback and attempt to use the latest git tag. Defaults to true.",
      "type": "boolean"
    },
    "sign": {
      "description": "If true, git will sign the commit with the systems GPG key.",
      "type": "boolean"
    },
    "verify": {
      "description": "If true, git will run user defined git hooks before committing.",
      "type": "boolean"
    },
    "skipBump": {
      "description": "Skip the bump step.",
      "type": "boolean"
    },
    "skipChangelog": {
      "description": "Skip the changelog step.",
      "type": "boolean"
    },
    "skipCommit": {
      "description": "Skip the commit step.",
      "type": "boolean"
    },
    "skipTag": {
      "description": "Skip the tag step.",
      "type": "boolean"
    },
    "changelogPresetConfig": {
      "description": "Override the default \"conventional-changelog-conventionalcommits\" preset configuration.",
      "type": "object",
      "properties": {
        "types": {
          "description": "List of explicitly supported commit message types.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of commit message, such as \"feat\", \"fix\", \"chore\".",
                "type": "string"
              },
              "scope": {
                "description": "The scope of the commit message.",
                "type": "string"
              },
              "section": {
                "description": "The section of the `CHANGELOG` the commit should show up in.",
                "type": "string"
              },
              "hidden": {
                "description": "Should show in the generated changelog message?",
                "type": "boolean"
              }
            },
            "required": [
              "type"
            ],
            "additionalProperties": false
          }
        },
        "commitUrlFormat": {
          "description": "A URL representing a specific commit at a hash.",
          "type": "string"
        },
        "compareUrlFormat": {
          "description": "A URL representing the comparison between two git SHAs.",
          "type": "string"
        },
        "issueUrlFormat": {
          "description": "A URL representing the issue format.",
          "type": "string"
        },
        "userUrlFormat": {
          "description": "A URL representing a user's profile on GitHub, Gitlab, etc.",
          "type": "string"
        },
        "releaseCommitMessageFormat": {
          "description": "A string to be used to format the auto-generated release commit message.",
          "type": "string"
        },
        "issuePrefixes": {
          "description": "List of prefixes used to detect references to issues.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "releaseMessageSuffix": {
      "description": "Add a suffix to the release commit message.",
      "type": "string"
    }
  },
  "required": [],
  "additionalProperties": false
}